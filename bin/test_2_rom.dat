@00

101_11000   // LDA (101)
0000_0001   // Load data from RAM address 1: 10101010

011_11000   // AND (011)
0000_0010   // AND (accumulator: 10101010, RAM address 2: 11111111) result: 10101010

100_11000   // XOR (100)
0000_0001   // XOR (accumulator: 10101010, RAM address 1: 10101010) result: 00000000

001_00000   // SKZ (001)
0000_0000   // ALU output is now 00000000, will skip

000_00000   // HLT (000)
0000_0000   // Will process if previous step failed

010_11000   // ADD (010)
0000_0000   // ADD (accumulator: 00000000, RAM address 0: 00000001) result: 00000001

001_00000   // SKZ (001)
0000_0000   // ALU output is now 00000001, won't skip

111_00000   // JMP (111)
0001_0010   // Jump to ROM address 10010 (18)

000_00000   // HLT (000)
0000_0000   // Will process if JMP failed

100_11000   // XOR (100)
0000_0010   // XOR (accumulator: 00000001, RAM address 2: 11111111) result: 11111110

010_11000   // ADD (010)
0000_0000   // ADD (accumulator: 11111110, RAM address 0: 00000001) result: 11111111

110_11000   // STO (110)
0000_0011   // Store data to RAM address 3: 11111111

101_11000   // LDA (101)
0000_0000   // Load data from RAM address 0: 00000001

010_11000   // ADD (010)
0000_0011   // ADD (accumulator: 00000001, RAM address 3: 11111111) result: 00000000 (overflow)

001_00000   // SKZ (001)
0000_0000   // ALU output is now 00000000, will skip

000_00000   // HLT (000)
0000_0000   // Will process if previous step failed

000_00000   // HLT (000)
0000_0000   // Will process if everything goes fine, test ends here

111_00000   // JMP (111)
0000_0000